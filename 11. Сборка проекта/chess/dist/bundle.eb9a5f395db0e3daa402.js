(()=>{"use strict";function e(e,l,o){let s=l.filter((e=>e.y>=0&&e.x<8&&e.y<8&&e.x>=0)).map((l=>(null===e[l.y][l.x]||e[l.y][l.x].color!==o)&&l)),t=s.filter((l=>null!==e[l.y][l.x]&&e[l.y][l.x].color!==o));console.log(t.splice(1));let i=s;for(let e of s)!1===e&&(i=s.slice(0,s.indexOf(!1)));return i}class l{constructor(e){this.color=e,this.name="rook"}getMoves(l,o){const s=[],t=[],i=[],n=[];for(let e=1;e<=8;e++)s.push({y:o.y+e,x:o.x}),i.push({y:o.y-e,x:o.x}),t.push({y:o.y,x:o.x+e}),n.push({y:o.y,x:o.x-e});const h=e(l,s,this.color),c=e(l,i,this.color),y=e(l,t,this.color),x=e(l,n,this.color);return y.concat(h,c,x)}}class o{constructor(e){this.color=e,this.name="knight"}getMoves(e,l){return function(e,l,o){const s=l.filter((e=>e.y>=0&&e.x<=7&&e.y<=7&&e.x>=0)).map((l=>{let s=e[l.y][l.x];return(null===s||o!==s.color)&&l})).sort();return s.slice(0,s.indexOf(!1))}(e,[{y:l.y+2,x:l.x+1},{y:l.y+2,x:l.x-1},{y:l.y+1,x:l.x+2},{y:l.y-1,x:l.x+2},{y:l.y-1,x:l.x-2},{y:l.y+1,x:l.x-2},{y:l.y-2,x:l.x-1},{y:l.y-2,x:l.x+1}],this.color)}}class s{constructor(e){this.color=e,this.name="bishop"}getMoves(l,o){const s=[],t=[],i=[],n=[];for(let e=1;e<8;e++)s.push({y:o.y+e,x:o.x+e}),t.push({y:o.y-e,x:o.x-e}),i.push({y:o.y+e,x:o.x-e}),n.push({y:o.y-e,x:o.x+e});const h=e(l,s,this.color),c=e(l,t,this.color),y=e(l,i,this.color),x=e(l,n,this.color);return y.concat(h,c,x)}}class t{constructor(e){this.color=e,this.name="king"}getMoves(l,o){const s=[];for(let e=1;e<=1;e++)s.push({y:o.y+e,x:o.x},{y:o.y-e,x:o.x},{y:o.y+e,x:o.x+e},{y:o.y-e,x:o.x+e},{y:o.y,x:o.x+e},{y:o.y,x:o.x-e});return e(l,s,this.color)}}class i{constructor(e){this.color=e,this.name="queen"}getMoves(l,o){const s=[],t=[],i=[],n=[],h=[],c=[],y=[],x=[];for(let e=1;e<8;e++)s.push({y:o.y+e,x:o.x}),i.push({y:o.y-e,x:o.x}),t.push({y:o.y,x:o.x+e}),n.push({y:o.y,x:o.x-e}),h.push({y:o.y+e,x:o.x+e}),c.push({y:o.y-e,x:o.x-e}),y.push({y:o.y+e,x:o.x-e}),x.push({y:o.y-e,x:o.x+e});const r=e(l,s,this.color),u=e(l,i,this.color),w=e(l,t,this.color),a=e(l,n,this.color),f=e(l,h,this.color),d=e(l,c,this.color),k=e(l,y,this.color),v=e(l,x,this.color);return w.concat(r,u,a,f,d,k,v)}}class n{constructor(e){this.notMoved=!0,this.color=e,this.name="pawn"}getMoves(e,l){const o=[{y:l.y+1,x:l.x},{y:l.y+2,x:l.x},{y:l.y+1,x:l.x+1},{y:l.y+1,x:l.x-1},{y:l.y-1,x:l.x},{y:l.y-2,x:l.x},{y:l.y-1,x:l.x+1},{y:l.y-1,x:l.x-1}].filter((e=>e.y>=0&&e.x<=7&&e.y<=7&&e.x>=0)).map((o=>{let s=e[o.y][o.x];return(null!==s&&s.color!==this.color||null===s&&o.x===l.x)&&o})).map((e=>"white"===this.color&&e.y>l.y||"black"===this.color&&e.y<l.y?e:void 0)).sort();return o.slice(0,o.indexOf(void 0)).filter((e=>!1===this.notMoved&&"white"===this.color?e.y===l.y+1:!1===this.notMoved&&"black"===this.color?e.y===l.y-1:e))}}let h=new class extends class{constructor(){this.field=[[new s("white"),new o("white"),new l("white"),new i("white"),new t("white"),new l("white"),new o("white"),new s("white")],[new n("white"),new n("white"),new n("white"),new n("white"),new n("white"),new n("white"),new n("white"),new n("white")],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new n("black"),new n("black"),new n("black"),new n("black"),new n("black"),new n("black"),new n("black"),new n("black")],[new s("black"),new o("black"),new l("black"),new i("black"),new t("black"),new l("black"),new o("black"),new s("black")]]}}{constructor(){super(),this.killedWhite=[],this.killedBlack=[],this.moveCounter=0,this.checkMoveColor=0,this.moves=[],this.possibleMoves=[]}getMoves(e){if(null===this.field[e.y][e.x])console.log("Error! The cell is empty");else{const l=this.field[e.y][e.x].getMoves(this.field,e).map((e=>e.join(",")));console.log(l),this.possibleMoves=l}}move(e,l){const o=Object.values(l).join(",");if("King"===this.field[e.y][e.x].name&&"white"===this.field[e.y][e.x].color&&0===possibleMoves.length&&console.log("Game over, black won"),"King"===this.field[e.y][e.x].name&&"black"===this.field[e.y][e.x].color&&0===possibleMoves.length&&console.log("Game over, black won"),0===this.checkMoveColor&&"white"===this.field[e.y][e.x].color?this.possibleMoves.includes(o)&&(this.moves.push(e,l),this.killedBlack.push(this.field[l.y][l.x]),this.field[l.y][l.x]=this.field[e.y][e.x],this.field[e.y][e.x]=null,this.moveCounter++,this.checkMoveColor++):1===this.checkMoveColor&&"black"===this.field[e.y][e.x].color&&this.possibleMoves.includes(o)&&(this.moves.push(e,l),this.killedWhite.push(this.field[l.y][l.x]),this.field[l.y][l.x]=this.field[e.y][e.x],this.field[e.y][e.x]=null,this.moveCounter++,this.checkMoveColor--),7===l.y&&new Pawn("white")||0===l.y&&new Pawn("black")){let e=1;if(new Pawn("white"))1===e&&(this.field[l.y][l.x]=new Queen("white")),2===e&&(this.field[l.y][l.x]=new Bishop("white")),3===e&&(this.field[l.y][l.x]=new Rook("white")),4===e&&(this.field[l.y][l.x]=new Knight("white"));else{if(!new Pawn("black"))return`There is ${this.field[l.y][l.x].name} figure, unable to move there`;{let e=1;1===e&&(this.field[l.y][l.x]=new Queen("black")),2===e&&(this.field[l.y][l.x]=new Bishop("black")),3===e&&(this.field[l.y][l.x]=new Rook("black")),4===e&&(this.field[l.y][l.x]=new Knight("black"))}}}}showKilled(){console.log(this.killed)}showCounter(){console.log(this.moveCounter)}showMoves(){console.log(this.moves)}showField(){console.log(this.field)}};h.getMoves({y:1,x:4}),h.move({y:1,x:4},{y:3,x:4}),h.getMoves({y:6,x:1}),h.move({y:6,x:1},{y:4,x:1}),h.getMoves({y:3,x:4}),h.showCounter(),h.showMoves(),h.showField()})();